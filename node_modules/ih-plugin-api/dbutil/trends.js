/**
 * trends.js
 * Формирование данных для трендов
 * 
 */

const util = require('util');
const rollup = require('./rollup');

/**
 * Формировать данные, считанные из БД, для отдачи на график
 *
 * @param {Array of Objects} records - [{dn,prop,ts,val},...]
 * @param {Array} dnarr ['POO1.temp1','POO1.temp2']
 * @return {Array of Arrays} : [[1608574986578, null,42],[1608574986580, 24,null],...]
 */
function getArray(records, dnarr) {
  if (!dnarr || !dnarr.length || !records || !records.length) return [];

  // const dArr = dnarr.map(item => item.split('.')[0]);
  const dArr = dnarr;
  const rarr = [];
  const len = dArr.length;
  let last_ts;

  for (let i = 0; i < records.length; i++) {
    const rec = records[i];

    if (!rec || !rec.dn || !rec.prop || !rec.ts) continue;

    const dn_prop = rec.dn + '.' + rec.prop;
    const dn_indx = dArr.findIndex(el => el == dn_prop);
    // const dn_indx = dArr.findIndex(el => el == rec.dn);
    if (dn_indx < 0) continue;

    let data;
    const ts = rec.ts;
    // multiple series data combine
    if (ts != last_ts) {
      data = new Array(len + 1).fill(null);
      data[0] = ts;
      last_ts = ts;
    } else {
      data = rarr.pop();
    }
    data[1 + dn_indx] = Number(rec.val);
    rarr.push(data);
  }
  return rarr;
}


/**
 * Формировать данные, считанные из БД, для отдачи на график
 *
 * @param {Array of Objects} records - [{dn,prop,ts,val},...]
 * @param {Array} dnarr ['POO1.temp1','POO1.temp2']
 * @return {Object} : {<dn_prop>:{data:[{x,y},...]}}
 */
function getObject(records, dnarr, readobj) {

  if (!dnarr || !dnarr.length || !records || !records.length) return [];
 
  if (readobj && readobj.process_type == 'afun') {
    // агрегирование (свертка)
    return rollup(records, readobj);
  }
 
  const res = {};
  for (let i = 0; i < records.length; i++) {
    const rec = records[i];

    if (!rec || !rec.dn || !rec.prop || !rec.ts) continue;

    const dn_prop = rec.dn + '.' + rec.prop;
    if (!res[dn_prop]) res[dn_prop] = {points:[]};
    res[dn_prop].points.push({x:rec.ts, y:Number(rec.val)})
  }

  const arr = [];
  Object.keys(res).forEach(dn_prop => {
    arr.push({id:dn_prop, points:res[dn_prop].points});
  })
  return arr;
}

module.exports = {
  getArray,
  getObject
}