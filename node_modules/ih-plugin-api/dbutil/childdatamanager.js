/**
 *
 */

const util = require('util');

const projecttables = require('./projecttables');

class Childdatamanager {
  start({ customFolder, jbaseFolder }) {
    this.customFolder = customFolder;
    this.jbaseFolder = jbaseFolder;
    this.db = {};
  }

  async tryOpen(name, folder) {
    if (this.db[name]) return this.db[name];
    try {
      const filename = folder + '/' + name + '.db';
      const one = await projecttables.open(filename);
      this.db[name] = one;
      return one;
    } catch (e) {
      console.log('ERROR: tryOpen ' + util.inspect(e));
    }
  }

  async getIds(arr) {
    if (!arr) return [];
    // [{did, prop}, {did, prop}, ...]

    let db = await this.tryOpen('devicedb', this.jbaseFolder);
    if (!db) return [];
    const res = [];
    try {
      for (const item of arr) {
        const rec = await projecttables.get(db, { did: item.did, prop: item.prop });
        let id = rec && rec.length ? rec[0]._id.substr(3) : '';
        res.push(Number(id));
      }

      return res;
    } catch (e) {
      console.log('ERROR: getIds ' + util.inspect(e));
    }
  }

  async getRecords({ table, filter, opt }) {
    // [{did, prop}, {did, prop}, ...]
    // const filename = this.customFolder + '/' + table + '.db';
    // if (!fs.existsSync(filename)) return [];
    let db = await this.tryOpen(table, this.customFolder);
    if (!db) return [];

    let res = [];
    filter = filter || {};
    opt = opt || {};

    try {
      res = await projecttables.get(db, filter, opt);
      db = null;
    } catch (e) {
      console.log('ERROR: getRecords table=' + table + util.inspect(e));
    }
    return res;
  }

  async findOneRecord({ table, filter, opt }) {
    const res = await this.getRecords({ table, filter, opt });
    return res && res.length ? res[0] : '';
  }

  async getDevice(did) {
    const db = await this.tryOpen('device', this.jbaseFolder);
    if (!db) return [];
    try {
      const rec = await projecttables.get(db, { _id: did });
      return rec && rec.length ? rec[0] : '';
    } catch (e) {
      console.log('ERROR: getDevice ' + util.inspect(e));
    }
  }

  async getDn(did) {
    // const dobj = await this.getDevice(did);
    // return dobj ? dobj.dn : '';
    const db = await this.tryOpen('device', this.jbaseFolder);
    if (!db) return [];

    try {
      const rec = await projecttables.get(db, { _id: did });
      const dobj = rec && rec.length ? rec[0] : '';
      return dobj ? dobj.dn : '';
    } catch (e) {
      console.log('ERROR: getDn ' + util.inspect(e));
    }
  }
}

module.exports = new Childdatamanager();
