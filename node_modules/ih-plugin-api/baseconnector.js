/*
 * Copyright (c) 2019 Intra LLC
 * MIT LICENSE
 *
 * Connector локального плагина
 */

const util = require('util');

module.exports = Baseconnector;

function Baseconnector() {
  if (!(this instanceof Baseconnector)) return new Baseconnector();

  let that = this;

  process.on('message', message => {
    try {
      if (typeof message != 'object') return;
      if (message.type) {
        const type = message.type == 'get' ? 'get_' + message.id : message.type;
        that.emit(type, message);
      } else {
        that.emit('error', 'Missing type in message: ' + util.inspect(message));
      }
    } catch (e) {
      console.log('Baseconnector CATCH on message ' + util.inspect(message) + '  ERROR: '+util.inspect(e));
    }
  });

  process.on('uncaughtException', err => {
    that.emit('error', 'ERR: uncaughtException ' + util.inspect(err));
  });

  process.on('unhandledRejection', (reason, promise) => {
    const txt = 'Reason ' + util.inspect(reason) + '. Promise ' + util.inspect(promise);
    that.emit('error', 'ERR: unhandledRejection! ' + txt);
  });
}
util.inherits(Baseconnector, require('events').EventEmitter);

Baseconnector.prototype.send = function(message) {
  process.send(message);
};
