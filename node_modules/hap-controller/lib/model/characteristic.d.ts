export interface CharacteristicObject {
    serviceUuid?: string;
    aid?: number;
    iid?: number;
    type?: string;
    value?: unknown;
    perms?: string[];
    ev?: boolean;
    description?: string;
    format?: string;
    unit?: string;
    minValue?: number;
    maxValue?: number;
    minStep?: number;
    maxLen?: number;
    maxDataLen?: number;
    'valid-values'?: number[];
    'valid-values-range'?: number[];
    TTL?: number;
    pid?: number;
    status?: number;
}
/**
 * Ensure the type is a valid characteristic UUID, also when short representations is used
 *
 * @param {string} uuid - Characteristic UUID
 * @returns {string} Characteristic UUID as UUID
 */
export declare function ensureCharacteristicUuid(uuid: string): string;
/**
 * Get a characteristic name from its UUID.
 *
 * @param {string} uuid - Characteristic UUID
 * @returns {string} Characteristic name
 */
export declare function characteristicFromUuid(uuid: string): string;
/**
 * Get a characteristic UUID from its name.
 *
 * @param {string} characteristic - Characteristic name
 * @returns {string} Characteristic UUID
 */
export declare function uuidFromCharacteristic(characteristic: string): string;
//# sourceMappingURL=characteristic.d.ts.map